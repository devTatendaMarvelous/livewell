<?php

namespace App\Services;

use Symfony\Component\HttpFoundation\StreamedResponse;

class ReportExporter
{
    /**
     * Stream CSV download from provided header row and data rows
     *
     * @param string $filename
     * @param array $headers
     * @param array $rows
     * @return StreamedResponse
     */
    public static function csv(string $filename, array $headers, array $rows): StreamedResponse
    {
        $response = new StreamedResponse(function () use ($headers, $rows) {
            $handle = fopen('php://output', 'w');
            // Output BOM for Excel UTF-8 compatibility
            fprintf($handle, chr(0xEF).chr(0xBB).chr(0xBF));
            fputcsv($handle, $headers);
            foreach ($rows as $row) {
                fputcsv($handle, $row);
            }
            fclose($handle);
        });
        $response->headers->set('Content-Type', 'text/csv');
        $response->headers->set('Content-Disposition', 'attachment; filename="' . $filename . '"');
        return $response;
    }

    /**
     * Generate a very simple PDF (text-only) without external libraries.
     * This builds a minimal PDF structure with monospaced text lines.
     *
     * @param string $filename
     * @param array $lines
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public static function simplePdf(string $filename, array $lines)
    {
        // Build a basic PDF with Helvetica text lines.
        $contentStream = "BT\n/F1 12 Tf\n72 720 Td\n"; // Start near top-left
        $y = 720;
        foreach ($lines as $line) {
            $escaped = str_replace(['\\', '(', ')', "\r", "\n"], ['\\\\', '\\(', '\\)', ' ', ' '], (string)$line);
            $contentStream .= "($escaped) Tj\n";
            $y -= 16;
            $contentStream .= "0 -16 Td\n"; // move down
        }
        $contentStream .= "ET\n";

        $len = strlen($contentStream);

        $pdf = "%PDF-1.4\n";
        $offsets = [];
        $objects = [];

        // 1: Font
        $objects[] = "1 0 obj<< /Type /Font /Subtype /Type1 /BaseFont /Helvetica >>endobj\n";
        // 2: Contents
        $objects[] = "2 0 obj<< /Length $len >>stream\n$contentStream\nendstream endobj\n";
        // 3: Page
        $objects[] = "3 0 obj<< /Type /Page /Parent 4 0 R /MediaBox [0 0 612 792] /Contents 2 0 R /Resources << /Font << /F1 1 0 R >> >> >>endobj\n";
        // 4: Pages
        $objects[] = "4 0 obj<< /Type /Pages /Kids [3 0 R] /Count 1 >>endobj\n";
        // 5: Catalog
        $objects[] = "5 0 obj<< /Type /Catalog /Pages 4 0 R >>endobj\n";

        $pdf .= "% Generated by ReportExporter::simplePdf\n";
        foreach ($objects as $obj) {
            $offsets[] = strlen($pdf);
            $pdf .= $obj;
        }
        $xrefPos = strlen($pdf);
        $pdf .= "xref\n0 " . (count($objects) + 1) . "\n";
        $pdf .= "0000000000 65535 f \n";
        foreach ($offsets as $off) {
            $pdf .= sprintf("%010d 00000 n \n", $off);
        }
        $pdf .= "trailer<< /Size " . (count($objects) + 1) . " /Root 5 0 R >>\nstartxref\n$xrefPos\n%%EOF";

        return response($pdf, 200, [
            'Content-Type' => 'application/pdf',
            'Content-Disposition' => 'attachment; filename="' . $filename . '"',
        ]);
    }
}
